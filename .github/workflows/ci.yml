name: CI - Test and Validate Model

on:
  push:
    branches: [ main, master, develop, copilot/** ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest test_cfb_model.py -v --tb=short
    
    - name: Test model initialization
      run: |
        python -c "from model import CFBModel; m = CFBModel(); print('✓ Model initialized successfully')"
    
    - name: Test preprocessor
      run: |
        python -c "from preprocessor import CFBPreprocessor; p = CFBPreprocessor(); print('✓ Preprocessor initialized successfully')"
    
    - name: Test imports
      run: |
        python -c "import data_fetcher, preprocessor, model, config; print('✓ All modules import successfully')"

  model-functionality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test model training with synthetic data
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        from model import CFBModel
        
        # Create synthetic training data
        np.random.seed(42)
        X = pd.DataFrame({
            'home_off_total_yards': np.random.randint(200, 500, 100),
            'away_off_total_yards': np.random.randint(200, 500, 100),
            'home_talent': np.random.uniform(0, 100, 100),
            'away_talent': np.random.uniform(0, 100, 100),
        })
        y = pd.Series(np.random.randint(0, 2, 100))
        
        # Train model
        model = CFBModel(model_type='random_forest')
        metrics = model.train(X, y, test_size=0.3)
        
        print('Training completed successfully!')
        print(f'Train Accuracy: {metrics[\"train_accuracy\"]:.2%}')
        print(f'Test Accuracy: {metrics[\"test_accuracy\"]:.2%}')
        print(f'CV Mean: {metrics[\"cv_mean\"]:.2%}')
        print('✓ Model training and prediction pipeline works correctly')
        "
    
    - name: Test model prediction
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        from model import CFBModel
        
        # Create and train model
        np.random.seed(42)
        X_train = pd.DataFrame({
            'home_off_total_yards': np.random.randint(200, 500, 100),
            'away_off_total_yards': np.random.randint(200, 500, 100),
            'home_talent': np.random.uniform(0, 100, 100),
            'away_talent': np.random.uniform(0, 100, 100),
        })
        y_train = pd.Series(np.random.randint(0, 2, 100))
        
        model = CFBModel()
        model.train(X_train, y_train, test_size=0.3)
        
        # Test prediction
        X_test = pd.DataFrame({
            'home_off_total_yards': [350],
            'away_off_total_yards': [300],
            'home_talent': [75.0],
            'away_talent': [65.0],
        })
        
        predictions = model.predict(X_test)
        probabilities = model.predict_proba(X_test)
        
        print(f'Prediction: {predictions[0]}')
        print(f'Probability: {probabilities[0]}')
        print('✓ Model prediction works correctly')
        "
    
    - name: Verify all test files run
      run: |
        if [ -f "test_weekly_predictions.py" ]; then
          echo "Found test_weekly_predictions.py - testing it"
          python -m pytest test_weekly_predictions.py -v --tb=short || echo "⚠ test_weekly_predictions.py has issues (may require API key)"
        fi
        if [ -f "test_functionality.py" ]; then
          echo "Found test_functionality.py - testing it"
          python -m pytest test_functionality.py -v --tb=short || echo "⚠ test_functionality.py has issues (may require API key)"
        fi
