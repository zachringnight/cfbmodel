name: Run CFB Model and Generate Predictions

on:
  # Run on schedule (every Saturday at 8 AM UTC)
  schedule:
    - cron: '0 8 * * 6'
  
  # Allow manual workflow dispatch
  workflow_dispatch:
    inputs:
      year:
        description: 'Season year for predictions'
        required: false
        default: ''
      week:
        description: 'Week number for predictions (auto-detect if not specified)'
        required: false
        default: ''
      train_year:
        description: 'Year to use for training data'
        required: false
        default: ''

jobs:
  run-model:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run model training and predictions
        env:
          CFB_API_KEY: ${{ secrets.CFB_API_KEY }}
        run: |
          # Determine parameters
          YEAR="${{ github.event.inputs.year }}"
          WEEK="${{ github.event.inputs.week }}"
          TRAIN_YEAR="${{ github.event.inputs.train_year }}"
          
          # Use current year if not specified
          if [ -z "$YEAR" ]; then
            YEAR=$(date +%Y)
          fi
          
          # Use previous year for training if not specified
          if [ -z "$TRAIN_YEAR" ]; then
            TRAIN_YEAR=$((YEAR - 1))
          fi
          
          # Build command with structured outputs
          CMD="python run_predictions_with_outputs.py --train --train-year $TRAIN_YEAR --year $YEAR"
          
          # Add week if specified
          if [ -n "$WEEK" ]; then
            CMD="$CMD --week $WEEK"
          fi
          
          # Add output file names with timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          CMD="$CMD --output-json predictions_${TIMESTAMP}.json --output-csv predictions_${TIMESTAMP}.csv"
          
          # Run predictions and save output
          echo "Running: $CMD"
          $CMD 2>&1 | tee predictions_output.txt
          
          # Save exit code
          echo $? > exit_code.txt
      
      - name: Generate summary report
        if: always()
        run: |
          # Create a summary report
          echo "# CFB Model Run Summary" > summary.md
          echo "" >> summary.md
          echo "**Date:** $(date)" >> summary.md
          echo "**Workflow Run:** ${{ github.run_number }}" >> summary.md
          echo "" >> summary.md
          
          # Add exit status
          EXIT_CODE=$(cat exit_code.txt 2>/dev/null || echo "unknown")
          if [ "$EXIT_CODE" = "0" ]; then
            echo "**Status:** ✅ Success" >> summary.md
          else
            echo "**Status:** ❌ Failed (Exit Code: $EXIT_CODE)" >> summary.md
          fi
          echo "" >> summary.md
          
          # Extract key info from output
          if [ -f predictions_output.txt ]; then
            echo "## Output Summary" >> summary.md
            echo "\`\`\`" >> summary.md
            tail -n 50 predictions_output.txt >> summary.md
            echo "\`\`\`" >> summary.md
          fi
          
          # Display summary in workflow
          cat summary.md >> $GITHUB_STEP_SUMMARY
      
      - name: Upload predictions output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: predictions-output-${{ github.run_number }}
          path: |
            predictions_output.txt
            summary.md
            exit_code.txt
          retention-days: 30
      
      - name: Upload trained model
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: trained-model-${{ github.run_number }}
          path: |
            cfb_model.pkl
          retention-days: 90
      
      - name: Upload predictions as JSON (if available)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: predictions-data-${{ github.run_number }}
          path: |
            predictions*.json
            predictions*.csv
          if-no-files-found: ignore
          retention-days: 30
